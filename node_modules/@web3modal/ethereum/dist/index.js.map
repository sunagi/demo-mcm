{"version":3,"file":"index.js","sources":["../src/client.ts","../src/utils.ts"],"sourcesContent":["import type { Chain, Client, ConnectArgs, Connector } from '@wagmi/core'\nimport {\n  connect,\n  disconnect,\n  fetchBalance,\n  fetchEnsAvatar,\n  fetchEnsName,\n  getAccount,\n  getNetwork,\n  switchNetwork,\n  watchAccount,\n  watchNetwork\n} from '@wagmi/core'\nimport type { ConnectorId, ModalConnectorsOpts } from './types'\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Client\n  public walletConnectVersion: ModalConnectorsOpts['version'] = 1\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    this.wagmi = wagmi\n    this.chains = chains\n    const { isV2 } = this.getWalletConnectConnectors()\n    this.walletConnectVersion = isV2 ? 2 : 1\n  }\n\n  // -- private ------------------------------------------- //\n  private getWalletConnectConnectors() {\n    const wcc = this.wagmi.connectors.find((c: Connector) => c.id === 'walletConnect')\n    const wc1c = this.wagmi.connectors.find((c: Connector) => c.id === 'walletConnectLegacy')\n    const connector = wcc ?? wc1c\n    if (!connector) {\n      throw new Error('WalletConnectConnector or WalletConnectLegacyConnector is required')\n    }\n\n    return { isV2: Boolean(wcc), connector }\n  }\n\n  private async connectWalletConnectV1(connector: Connector, onUri: (uri: string) => void) {\n    return new Promise<void>((resolve, reject) => {\n      connector.once('message', async ({ type }) => {\n        if (type === 'connecting') {\n          const providerConnector = (await connector.getProvider()).connector\n          onUri(providerConnector.uri)\n          providerConnector.on('disconnect', () => {\n            reject(Error())\n          })\n          providerConnector.on('connect', () => {\n            resolve()\n          })\n        }\n      })\n    })\n  }\n\n  private async connectWalletConnectV2(connector: Connector, onUri: (uri: string) => void) {\n    const provider = await connector.getProvider()\n\n    return new Promise<void>(resolve => {\n      provider.once('display_uri', (uri: string) => {\n        onUri(uri)\n        resolve()\n      })\n    })\n  }\n\n  // -- public web3modal ---------------------------------- //\n  public namespace = 'eip155'\n\n  public getConnectorById(id: ConnectorId | string) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) {\n      throw new Error(`Connector for id ${id} was not found`)\n    }\n\n    return connector\n  }\n\n  public getConnectors() {\n    const connectors = this.wagmi.connectors.filter(\n      connector => !connector.id.includes('walletConnect')\n    )\n\n    return connectors\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, chainId?: number) {\n    const { connector, isV2 } = this.getWalletConnectConnectors()\n    const options: ConnectArgs = { connector }\n    if (chainId) {\n      options.chainId = chainId\n    }\n    const handleProviderEvents = isV2\n      ? this.connectWalletConnectV2.bind(this)\n      : this.connectWalletConnectV1.bind(this)\n\n    return Promise.all([connect(options), handleProviderEvents(connector, onUri)])\n  }\n\n  public async connectConnector(connectorId: ConnectorId | string, chainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const options: ConnectArgs = { connector }\n    if (chainId) {\n      options.chainId = chainId\n    }\n    const data = await connect(options)\n\n    return data\n  }\n\n  public isInjectedProviderInstalled() {\n    return typeof window.ethereum !== 'undefined'\n  }\n\n  public safeCheckInjectedProvider(providerId: string) {\n    try {\n      const stringId = String(providerId)\n\n      // @ts-expect-error - Structure is correct\n      return Boolean(window.ethereum?.[stringId])\n    } catch (err) {\n      console.error(err)\n\n      return false\n    }\n  }\n\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n\n  public fetchBalance = fetchBalance\n\n  public getNetwork = getNetwork\n\n  public watchNetwork = watchNetwork\n\n  public switchNetwork = switchNetwork\n\n  // -- public web3modal (optional) ----------------------- //\n  public fetchEnsName = fetchEnsName\n\n  public fetchEnsAvatar = fetchEnsAvatar\n}\n","import { WalletConnectConnector } from '@wagmi/connectors/walletConnect'\nimport type { Chain, Connector } from '@wagmi/core'\nimport { InjectedConnector } from '@wagmi/core'\nimport { WalletConnectLegacyConnector } from '@wagmi/core/connectors/walletConnectLegacy'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nexport const NAMESPACE = 'eip155'\n\n// -- providers ------------------------------------------------------- //\nexport function w3mProvider<C extends Chain>({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider<C>({\n    rpc: chain => {\n      const supportedChains = [\n        1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 280, 324, 420, 42161, 42220, 43114, 80001, 421611,\n        421613, 1313161554, 1313161555\n      ]\n\n      if (supportedChains.includes(chain.id)) {\n        return {\n          http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${chain.id}&projectId=${projectId}`\n        }\n      }\n\n      return {\n        http: chain.rpcUrls.default.http[0],\n        webSocket: chain.rpcUrls.default.webSocket?.[0]\n      }\n    }\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function w3mConnectors({ chains, version, projectId }: ModalConnectorsOpts) {\n  const isV1 = version === 1\n\n  const connectors: Connector[] = [new InjectedConnector({ chains })]\n\n  if (isV1) {\n    connectors.unshift(\n      new WalletConnectLegacyConnector({\n        chains,\n        options: { qrcode: false }\n      })\n    )\n  } else {\n    connectors.unshift(\n      new WalletConnectConnector({\n        chains,\n        options: { projectId, showQrModal: false }\n      })\n    )\n  }\n\n  return connectors\n}\n"],"names":["EthereumClient","wagmi","chains","disconnect","getAccount","watchAccount","fetchBalance","getNetwork","watchNetwork","switchNetwork","fetchEnsName","fetchEnsAvatar","isV2","wcc","c","wc1c","connector","onUri","resolve","reject","type","providerConnector","provider","uri","id","item","chainId","options","handleProviderEvents","connect","connectorId","providerId","_a","stringId","err","NAMESPACE","w3mProvider","projectId","jsonRpcProvider","chain","w3mConnectors","version","isV1","connectors","InjectedConnector","WalletConnectLegacyConnector","WalletConnectConnector"],"mappings":"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"}